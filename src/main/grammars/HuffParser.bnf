// based on https://github.com/intellij-solidity/intellij-solidity/blob/1d66fde5/src/main/grammars/solidity.bnf
{
  parserClass="com.github.com.cakevm.intellij_huff_plugin.language.parser.HuffParser"

  extends="com.intellij.extapi.psi.ASTWrapperPsiElement"

  psiClassPrefix="Huff"
  psiImplClassSuffix="Impl"
  psiPackage="com.github.com.cakevm.intellij_huff_plugin.language.psi"
  psiImplPackage="com.github.com.cakevm.intellij_huff_plugin.language.psi.impl"
  implements="com.github.com.cakevm.intellij_huff_plugin.language.psi.element.HuffElement"

  elementTypeHolderClass="com.github.com.cakevm.intellij_huff_plugin.language.psi.HuffElementTypes"
  elementTypeClass="com.github.com.cakevm.intellij_huff_plugin.language.psi.type.HuffElementType"
  tokenTypeClass="com.github.com.cakevm.intellij_huff_plugin.language.psi.type.HuffTokenType"

  tokens = [
    L_PAREN='('
    R_PAREN=')'
    L_BRACK='['
    R_BRACK=']'
    COMMA=','
    L_BRACE='{'
    R_BRACE='}'
    EQUAL='='
    DOUBLE_QUOTE='"'
    COLON=':'
    LESS_THAN='<'
    GREATER_THAN='>'

    // Huff specific
    INCLUDE='#include'
    DEFINE='#define'
    DECORATOR_START='#['

    // Define statements
    FUNCTION='function'
    FN='fn'
    ERROR='error'
    EVENT='event'
    MACRO='macro'
    CONSTANT='constant'
    JUMPTABLE='jumptable'
    JUMPTABLE_PACKED='jumptable__packed'
    TABLE='table'
    TEST='test'

    // Constants
    FREE_STORAGE_POINTER='FREE_STORAGE_POINTER()'

    // reserved macro names
    MAIN='MAIN'
    CONSTRUCTOR='CONSTRUCTOR'
    FALLBACK='FALLBACK'

    // macro optional returns
    TAKES='takes'
    RETURNS='returns'

    // Build-in functions
    BUILD_IN_FN_TABLESIZE='__tablesize'
    BUILD_IN_FN_CODESIZE='__codesize'
    BUILD_IN_FN_TABLESTART='__tablestart'
    BUILD_IN_FN_FUNC_SIG='__FUNC_SIG'
    BUILD_IN_FN_EVENT_HASH='__EVENT_HASH'
    BUILD_IN_FN_ERROR='__ERROR'
    BUILD_IN_FN_RIGHTPAD='__RIGHTPAD'
    BUILD_IN_FN_CODECOPY_DYN_ARG='__CODECOPY_DYN_ARG'
    BUILD_IN_FN_VERBATIM='__VERBATIM'

    FROM='from'
    //ERROR='error'
    REVERT='revert'
    GLOBAL='global'
    TRANSIENT='transient'
    INDEXED='indexed'

    // state mutability
    NONPAYABLE='nonpayable'
    PAYABLE='payable'
    PURE='pure'
    VIEW='view'

    // Data location
    MEMORY='memory'
    STORAGE='storage'
    CALLDATA='calldata'

    /////////////////////
    // Regex
    /////////////////////
    COMMENT='regexp:(//.*)|(/\\*(?:.|[\\n\\r])*?\\*/)'
    NAT_SPEC_TAG='regexp:@[a-zA-Z_0-9:]*'

    QUOTED_STRING='regexp:("([^"\r\n\\]|\\.)*")|unicode("([^"])*")'
    DECIMAL='regexp:[0-9]+'
    HEXCODE='regexp:0x[0-9a-fA-F]+'

    SPACE='regexp:\s+'
    LABEL='regexp:[a-zA-Z_]+:'
    STRING_IDENTIFIER='regexp:[a-zA-Z_$][a-zA-Z_$0-9]*'

    intNumType='regexp:int(8|16|24|32|40|48|56|64|72|80|88|96|104|112|120|128|136|144|152|160|168|176|184|192|200|208|216|224|232|240|248|256)?'
    uIntNumType='regexp:uint(8|16|24|32|40|48|56|64|72|80|88|96|104|112|120|128|136|144|152|160|168|176|184|192|200|208|216|224|232|240|248|256)?'
    byteNumType='regexp:byte(1|2|3|4|5|6|7|8|9|10|11|12|13|14|15|16|17|18|19|20|21|22|23|24|25|26|27|28|29|30|31|32)?'
    bytesNumType='regexp:bytes(1|2|3|4|5|6|7|8|9|10|11|12|13|14|15|16|17|18|19|20|21|22|23|24|25|26|27|28|29|30|31|32)?'
    fixedNumType='regexp:fixed(0x8|0x16|0x24|0x32|0x40|0x48|0x56|0x64|0x72|0x80|0x88|0x96|0x104|0x112|0x120|0x128|0x136|0x144|0x152|0x160|0x168|0x176|0x184|0x192|0x200|0x208|0x216|0x224|0x232|0x240|0x248|0x256|8x8|8x16|8x24|8x32|8x40|8x48|8x56|8x64|8x72|8x80|8x88|8x96|8x104|8x112|8x120|8x128|8x136|8x144|8x152|8x160|8x168|8x176|8x184|8x192|8x200|8x208|8x216|8x224|8x232|8x240|8x248|16x8|16x16|16x24|16x32|16x40|16x48|16x56|16x64|16x72|16x80|16x88|16x96|16x104|16x112|16x120|16x128|16x136|16x144|16x152|16x160|16x168|16x176|16x184|16x192|16x200|16x208|16x216|16x224|16x232|16x240|24x8|24x16|24x24|24x32|24x40|24x48|24x56|24x64|24x72|24x80|24x88|24x96|24x104|24x112|24x120|24x128|24x136|24x144|24x152|24x160|24x168|24x176|24x184|24x192|24x200|24x208|24x216|24x224|24x232|32x8|32x16|32x24|32x32|32x40|32x48|32x56|32x64|32x72|32x80|32x88|32x96|32x104|32x112|32x120|32x128|32x136|32x144|32x152|32x160|32x168|32x176|32x184|32x192|32x200|32x208|32x216|32x224|40x8|40x16|40x24|40x32|40x40|40x48|40x56|40x64|40x72|40x80|40x88|40x96|40x104|40x112|40x120|40x128|40x136|40x144|40x152|40x160|40x168|40x176|40x184|40x192|40x200|40x208|40x216|48x8|48x16|48x24|48x32|48x40|48x48|48x56|48x64|48x72|48x80|48x88|48x96|48x104|48x112|48x120|48x128|48x136|48x144|48x152|48x160|48x168|48x176|48x184|48x192|48x200|48x208|56x8|56x16|56x24|56x32|56x40|56x48|56x56|56x64|56x72|56x80|56x88|56x96|56x104|56x112|56x120|56x128|56x136|56x144|56x152|56x160|56x168|56x176|56x184|56x192|56x200|64x8|64x16|64x24|64x32|64x40|64x48|64x56|64x64|64x72|64x80|64x88|64x96|64x104|64x112|64x120|64x128|64x136|64x144|64x152|64x160|64x168|64x176|64x184|64x192|72x8|72x16|72x24|72x32|72x40|72x48|72x56|72x64|72x72|72x80|72x88|72x96|72x104|72x112|72x120|72x128|72x136|72x144|72x152|72x160|72x168|72x176|72x184|80x8|80x16|80x24|80x32|80x40|80x48|80x56|80x64|80x72|80x80|80x88|80x96|80x104|80x112|80x120|80x128|80x136|80x144|80x152|80x160|80x168|80x176|88x8|88x16|88x24|88x32|88x40|88x48|88x56|88x64|88x72|88x80|88x88|88x96|88x104|88x112|88x120|88x128|88x136|88x144|88x152|88x160|88x168|96x8|96x16|96x24|96x32|96x40|96x48|96x56|96x64|96x72|96x80|96x88|96x96|96x104|96x112|96x120|96x128|96x136|96x144|96x152|96x160|104x8|104x16|104x24|104x32|104x40|104x48|104x56|104x64|104x72|104x80|104x88|104x96|104x104|104x112|104x120|104x128|104x136|104x144|104x152|112x8|112x16|112x24|112x32|112x40|112x48|112x56|112x64|112x72|112x80|112x88|112x96|112x104|112x112|112x120|112x128|112x136|112x144|120x8|120x16|120x24|120x32|120x40|120x48|120x56|120x64|120x72|120x80|120x88|120x96|120x104|120x112|120x120|120x128|120x136|128x8|128x16|128x24|128x32|128x40|128x48|128x56|128x64|128x72|128x80|128x88|128x96|128x104|128x112|128x120|128x128|136x8|136x16|136x24|136x32|136x40|136x48|136x56|136x64|136x72|136x80|136x88|136x96|136x104|136x112|136x120|144x8|144x16|144x24|144x32|144x40|144x48|144x56|144x64|144x72|144x80|144x88|144x96|144x104|144x112|152x8|152x16|152x24|152x32|152x40|152x48|152x56|152x64|152x72|152x80|152x88|152x96|152x104|160x8|160x16|160x24|160x32|160x40|160x48|160x56|160x64|160x72|160x80|160x88|160x96|168x8|168x16|168x24|168x32|168x40|168x48|168x56|168x64|168x72|168x80|168x88|176x8|176x16|176x24|176x32|176x40|176x48|176x56|176x64|176x72|176x80|184x8|184x16|184x24|184x32|184x40|184x48|184x56|184x64|184x72|192x8|192x16|192x24|192x32|192x40|192x48|192x56|192x64|200x8|200x16|200x24|200x32|200x40|200x48|200x56|208x8|208x16|208x24|208x32|208x40|208x48|216x8|216x16|216x24|216x32|216x40|224x8|224x16|224x24|224x32|232x8|232x16|232x24|240x8|240x16|248x8)?'
    uFixedNumType='regexp:ufixed(0x8|0x16|0x24|0x32|0x40|0x48|0x56|0x64|0x72|0x80|0x88|0x96|0x104|0x112|0x120|0x128|0x136|0x144|0x152|0x160|0x168|0x176|0x184|0x192|0x200|0x208|0x216|0x224|0x232|0x240|0x248|0x256|8x8|8x16|8x24|8x32|8x40|8x48|8x56|8x64|8x72|8x80|8x88|8x96|8x104|8x112|8x120|8x128|8x136|8x144|8x152|8x160|8x168|8x176|8x184|8x192|8x200|8x208|8x216|8x224|8x232|8x240|8x248|16x8|16x16|16x24|16x32|16x40|16x48|16x56|16x64|16x72|16x80|16x88|16x96|16x104|16x112|16x120|16x128|16x136|16x144|16x152|16x160|16x168|16x176|16x184|16x192|16x200|16x208|16x216|16x224|16x232|16x240|24x8|24x16|24x24|24x32|24x40|24x48|24x56|24x64|24x72|24x80|24x88|24x96|24x104|24x112|24x120|24x128|24x136|24x144|24x152|24x160|24x168|24x176|24x184|24x192|24x200|24x208|24x216|24x224|24x232|32x8|32x16|32x24|32x32|32x40|32x48|32x56|32x64|32x72|32x80|32x88|32x96|32x104|32x112|32x120|32x128|32x136|32x144|32x152|32x160|32x168|32x176|32x184|32x192|32x200|32x208|32x216|32x224|40x8|40x16|40x24|40x32|40x40|40x48|40x56|40x64|40x72|40x80|40x88|40x96|40x104|40x112|40x120|40x128|40x136|40x144|40x152|40x160|40x168|40x176|40x184|40x192|40x200|40x208|40x216|48x8|48x16|48x24|48x32|48x40|48x48|48x56|48x64|48x72|48x80|48x88|48x96|48x104|48x112|48x120|48x128|48x136|48x144|48x152|48x160|48x168|48x176|48x184|48x192|48x200|48x208|56x8|56x16|56x24|56x32|56x40|56x48|56x56|56x64|56x72|56x80|56x88|56x96|56x104|56x112|56x120|56x128|56x136|56x144|56x152|56x160|56x168|56x176|56x184|56x192|56x200|64x8|64x16|64x24|64x32|64x40|64x48|64x56|64x64|64x72|64x80|64x88|64x96|64x104|64x112|64x120|64x128|64x136|64x144|64x152|64x160|64x168|64x176|64x184|64x192|72x8|72x16|72x24|72x32|72x40|72x48|72x56|72x64|72x72|72x80|72x88|72x96|72x104|72x112|72x120|72x128|72x136|72x144|72x152|72x160|72x168|72x176|72x184|80x8|80x16|80x24|80x32|80x40|80x48|80x56|80x64|80x72|80x80|80x88|80x96|80x104|80x112|80x120|80x128|80x136|80x144|80x152|80x160|80x168|80x176|88x8|88x16|88x24|88x32|88x40|88x48|88x56|88x64|88x72|88x80|88x88|88x96|88x104|88x112|88x120|88x128|88x136|88x144|88x152|88x160|88x168|96x8|96x16|96x24|96x32|96x40|96x48|96x56|96x64|96x72|96x80|96x88|96x96|96x104|96x112|96x120|96x128|96x136|96x144|96x152|96x160|104x8|104x16|104x24|104x32|104x40|104x48|104x56|104x64|104x72|104x80|104x88|104x96|104x104|104x112|104x120|104x128|104x136|104x144|104x152|112x8|112x16|112x24|112x32|112x40|112x48|112x56|112x64|112x72|112x80|112x88|112x96|112x104|112x112|112x120|112x128|112x136|112x144|120x8|120x16|120x24|120x32|120x40|120x48|120x56|120x64|120x72|120x80|120x88|120x96|120x104|120x112|120x120|120x128|120x136|128x8|128x16|128x24|128x32|128x40|128x48|128x56|128x64|128x72|128x80|128x88|128x96|128x104|128x112|128x120|128x128|136x8|136x16|136x24|136x32|136x40|136x48|136x56|136x64|136x72|136x80|136x88|136x96|136x104|136x112|136x120|144x8|144x16|144x24|144x32|144x40|144x48|144x56|144x64|144x72|144x80|144x88|144x96|144x104|144x112|152x8|152x16|152x24|152x32|152x40|152x48|152x56|152x64|152x72|152x80|152x88|152x96|152x104|160x8|160x16|160x24|160x32|160x40|160x48|160x56|160x64|160x72|160x80|160x88|160x96|168x8|168x16|168x24|168x32|168x40|168x48|168x56|168x64|168x72|168x80|168x88|176x8|176x16|176x24|176x32|176x40|176x48|176x56|176x64|176x72|176x80|184x8|184x16|184x24|184x32|184x40|184x48|184x56|184x64|184x72|192x8|192x16|192x24|192x32|192x40|192x48|192x56|192x64|200x8|200x16|200x24|200x32|200x40|200x48|200x56|208x8|208x16|208x24|208x32|208x40|208x48|216x8|216x16|216x24|216x32|216x40|224x8|224x16|224x24|224x32|232x8|232x16|232x24|240x8|240x16|248x8)?'
    booleanLiteral='regexp:true|false'
  ]
  extends(".*TypeName")=TypeName
}

HuffFile ::= ( IncludeDirective | DefineDefinition | MacroDefinition | NAT_SPEC_TAG )*

Identifier ::= FROM | ERROR | REVERT | GLOBAL | TRANSIENT | CALLDATA | CONSTANT | CONSTRUCTOR | MAIN | OpcodeName | STRING_IDENTIFIER

IncludePath ::= QUOTED_STRING {
  implements        = "com.github.com.cakevm.intellij_huff_plugin.language.psi.element.HuffNamedElement"
  mixin              = "com.github.com.cakevm.intellij_huff_plugin.language.psi.mixin.HuffIncludePathMixin"
  stubClass          = "com.github.com.cakevm.intellij_huff_plugin.language.psi.stub.impl.HuffIncludePathStub"
  elementTypeFactory = "com.github.com.cakevm.intellij_huff_plugin.language.psi.stub.impl.FactoryKt.factory"
}

IncludeDirective ::= INCLUDE IncludePath

private DefineDefinition ::= DEFINE ( EventAbiDefinition | FunctionAbiDefinition | ConstantDefinition | ErrorDefinition
                              | TableDefinition )

// #define constant
ConstantDefinitionIdentifier ::= Identifier
ConstantDefinitionAssignment ::= FREE_STORAGE_POINTER | HEXCODE | MacroIdentifier
ConstantDefinition ::= CONSTANT ConstantDefinitionIdentifier EQUAL ConstantDefinitionAssignment {
  implements         = "com.github.com.cakevm.intellij_huff_plugin.language.psi.element.HuffCallableElement"
  mixin              = "com.github.com.cakevm.intellij_huff_plugin.language.psi.mixin.HuffConstantDefinitionMixin"
  stubClass          = "com.github.com.cakevm.intellij_huff_plugin.language.psi.stub.impl.HuffConstantDefinitionStub"
  elementTypeFactory = "com.github.com.cakevm.intellij_huff_plugin.language.psi.stub.impl.FactoryKt.factory"
}

// #define error
ErrorDefinition ::= ERROR Identifier ParameterList {
  implements         = "com.github.com.cakevm.intellij_huff_plugin.language.psi.element.HuffCallableElement"
  mixin              = "com.github.com.cakevm.intellij_huff_plugin.language.psi.mixin.HuffErrorDefinitionMixin"
  stubClass          = "com.github.com.cakevm.intellij_huff_plugin.language.psi.stub.impl.HuffErrorDefinitionStub"
  elementTypeFactory = "com.github.com.cakevm.intellij_huff_plugin.language.psi.stub.impl.FactoryKt.factory"
}

// #define table = code table for hexcode, jumptable = identifiers
TableBody ::= L_BRACE (HEXCODE+ | Identifier*) R_BRACE
TableDefinition ::= ( TABLE | JUMPTABLE | JUMPTABLE_PACKED ) Identifier TableBody {
  implements         = "com.github.com.cakevm.intellij_huff_plugin.language.psi.element.HuffCallableElement"
  mixin              = "com.github.com.cakevm.intellij_huff_plugin.language.psi.mixin.HuffTableDefinitionMixin"
  stubClass          = "com.github.com.cakevm.intellij_huff_plugin.language.psi.stub.impl.HuffTableDefinitionStub"
  elementTypeFactory = "com.github.com.cakevm.intellij_huff_plugin.language.psi.stub.impl.FactoryKt.factory"
}

// #define macro  ( fn is handled as macro )
MacroIdentifier ::= ( MAIN | CONSTRUCTOR | FALLBACK | Identifier )
MacroParameter ::= Identifier
MacroParameters ::=  L_PAREN ( MacroParameter ( COMMA MacroParameter )*)? R_PAREN
MacroTakesParameters ::= TAKES L_PAREN DECIMAL R_PAREN  // takes(1)
MacroReturnsParameters ::= RETURNS L_PAREN DECIMAL R_PAREN  // returns(1)
MacroConstantReference ::= L_BRACK Identifier R_BRACK
{
  implements = "com.github.com.cakevm.intellij_huff_plugin.language.psi.element.HuffReferenceElement"
  mixin      = "com.github.com.cakevm.intellij_huff_plugin.language.psi.mixin.HuffMacroConstantReferenceMixin"
}
MacroCallParameter ::= HEXCODE | QUOTED_STRING | MacroParameterReference | Identifier
BuildInFnFuncSigCall ::= BUILD_IN_FN_FUNC_SIG L_PAREN ( QUOTED_STRING | Identifier ) R_PAREN
{
  implements = "com.github.com.cakevm.intellij_huff_plugin.language.psi.element.HuffReferenceElement"
  mixin      = "com.github.com.cakevm.intellij_huff_plugin.language.psi.mixin.HuffBuildInFnFuncSigCallMixin"
}
BuildInFnErrorCall ::= BUILD_IN_FN_ERROR L_PAREN Identifier R_PAREN
{
  implements = "com.github.com.cakevm.intellij_huff_plugin.language.psi.element.HuffReferenceElement"
  mixin      = "com.github.com.cakevm.intellij_huff_plugin.language.psi.mixin.HuffBuildInFnErrorCallMixin"
}
BuildInFnEventHashCall ::= BUILD_IN_FN_EVENT_HASH L_PAREN ( QUOTED_STRING | Identifier ) R_PAREN
{
  implements = "com.github.com.cakevm.intellij_huff_plugin.language.psi.element.HuffReferenceElement"
  mixin      = "com.github.com.cakevm.intellij_huff_plugin.language.psi.mixin.HuffBuildInFnEventHashCallMixin"
}
BuildInFnTableCall ::= ( BUILD_IN_FN_TABLESIZE | BUILD_IN_FN_TABLESTART ) L_PAREN Identifier R_PAREN
{
  implements = "com.github.com.cakevm.intellij_huff_plugin.language.psi.element.HuffReferenceElement"
  mixin      = "com.github.com.cakevm.intellij_huff_plugin.language.psi.mixin.HuffBuildInFnTableCallMixin"
}
MacroCallIdentifier ::= ( BuildInFn | Identifier )
MacroCall ::= MacroCallIdentifier L_PAREN ( MacroCallParameter ( COMMA MacroCallParameter )*)? R_PAREN
{
  implements = "com.github.com.cakevm.intellij_huff_plugin.language.psi.element.HuffReferenceElement"
  mixin      = "com.github.com.cakevm.intellij_huff_plugin.language.psi.mixin.HuffMacroCallMixin"
}
MacroParameterReference ::= LESS_THAN Identifier GREATER_THAN
MacroLabel ::= Identifier COLON
{
  implements         = "com.github.com.cakevm.intellij_huff_plugin.language.psi.element.HuffCallableElement"
  mixin              = "com.github.com.cakevm.intellij_huff_plugin.language.psi.mixin.HuffMacroLabelMixin"
  stubClass          = "com.github.com.cakevm.intellij_huff_plugin.language.psi.stub.impl.HuffMacroLabelStub"
  elementTypeFactory = "com.github.com.cakevm.intellij_huff_plugin.language.psi.stub.impl.FactoryKt.factory"
}
MacroLabelGoTo ::= Identifier
{
  implements = "com.github.com.cakevm.intellij_huff_plugin.language.psi.element.HuffReferenceElement"
  mixin      = "com.github.com.cakevm.intellij_huff_plugin.language.psi.mixin.HuffMacroLabelGoToMixin"
}
// https://github.com/huff-language/huff-rs/blob/05d71e4f/huff_lexer/src/lib.rs#L250
// huff parse true/false as 1/0
HuffBoolMapping ::= BOOLEANLITERAL
MacroStatement ::= HEXCODE | OpcodeName | NAT_SPEC_TAG | HuffBoolMapping | MacroLabel | MacroConstantReference
                | BuildInFnFuncSigCall | BuildInFnErrorCall  | BuildInFnEventHashCall | BuildInFnTableCall | MacroCall
                | MacroParameterReference | MacroLabelGoTo
MacroBody ::= L_BRACE  MacroStatement* R_BRACE
BuildInFn ::= ( BUILD_IN_FN_CODESIZE | BUILD_IN_FN_RIGHTPAD | BUILD_IN_FN_CODECOPY_DYN_ARG | BUILD_IN_FN_VERBATIM )
// #define macro/fn
MacroType ::= (MACRO | FN | TEST)
MacroDefinition ::= TestDecorator? DEFINE MacroType MacroIdentifier MacroParameters EQUAL MacroTakesParameters? MacroReturnsParameters? MacroBody
{
  implements         = "com.github.com.cakevm.intellij_huff_plugin.language.psi.element.HuffCallableElement"
  mixin              = "com.github.com.cakevm.intellij_huff_plugin.language.psi.mixin.HuffMacroDefinitionMixin"
  stubClass          = "com.github.com.cakevm.intellij_huff_plugin.language.psi.stub.impl.HuffMacroDefinitionStub"
  elementTypeFactory = "com.github.com.cakevm.intellij_huff_plugin.language.psi.stub.impl.FactoryKt.factory"
}

// only tests can have a decorator
TestDecorator ::= DECORATOR_START (MacroCall (COMMA MacroCall)*)? R_BRACK

// All opcode names
OpcodeName ::= StackManagement | ArithmeticAndLogic | EnvironmentalInformation | StorageAndMemoryAccess
    | FlowControl | SystemAndCall | Logging | Miscellaneous | GasManagement
{
  implements = "com.github.com.cakevm.intellij_huff_plugin.language.psi.element.HuffElement"
}

// Stack Management Opcodes
StackManagement ::= PUSH0 | PUSH1 | PUSH2 | PUSH3 | PUSH4 | PUSH5 | PUSH6 | PUSH7 | PUSH8
    | PUSH9 | PUSH10 | PUSH11 | PUSH12 | PUSH13 | PUSH14 | PUSH15 | PUSH16
    | PUSH17 | PUSH18 | PUSH19 | PUSH20 | PUSH21 | PUSH22 | PUSH23 | PUSH24
    | PUSH25 | PUSH26 | PUSH27 | PUSH28 | PUSH29 | PUSH30 | PUSH31 | PUSH32
    | POP | DUP1 | DUP2 | DUP3 | DUP4 | DUP5 | DUP6 | DUP7 | DUP8
    | DUP9 | DUP10 | DUP11 | DUP12 | DUP13 | DUP14 | DUP15 | DUP16
    | SWAP1 | SWAP2 | SWAP3 | SWAP4 | SWAP5 | SWAP6 | SWAP7 | SWAP8
    | SWAP9 | SWAP10 | SWAP11 | SWAP12 | SWAP13 | SWAP14 | SWAP15 | SWAP16

// Arithmetic and Logic Opcodes
ArithmeticAndLogic ::= ADD | SUB | MUL | DIV | SDIV | MOD | SMOD | ADDMOD | MULMOD | EXP | SIGNEXTEND
    | LT | GT | SLT | SGT | EQ | ISZERO | AND | OR | XOR | NOT | BYTE | SHL | SHR | SAR | SHA3

// Environmental Information Opcodes
EnvironmentalInformation ::= ADDRESS | BALANCE | ORIGIN | CALLER | CALLVALUE
    | CALLDATALOAD | CALLDATASIZE | CALLDATACOPY | CODESIZE | CODECOPY | GASPRICE | EXTCODESIZE
    | EXTCODECOPY | EXTCODEHASH | RETURNDATASIZE | RETURNDATACOPY | BLOCKHASH | COINBASE
    | TIMESTAMP | NUMBER | DIFFICULTY | GASLIMIT | PREVRANDAO | CHAINID | BASEFEE | SELFBALANCE
    | BLOBHASH | BLOBBASEFEE

// Storage and Memory Access Opcodes
StorageAndMemoryAccess ::= SLOAD | SSTORE | MLOAD | MSTORE | MSTORE8 | MSIZE |TLOAD | TSTORE | MCOPY

// Flow Control Opcodes
FlowControl ::= JUMP | JUMPI | PC | JUMPDEST

// System and Call-Related Opcodes
SystemAndCall ::= CALL | CALLCODE | DELEGATECALL | STATICCALL | CREATE | CREATE2 | SELFDESTRUCT

// Logging Opcodes
Logging ::= LOG0 | LOG1 | LOG2 | LOG3 | LOG4

// Miscellaneous Opcodes
Miscellaneous ::= STOP | RETURN | REVERT | INVALID

// Gas and Cost Management Opcodes
GasManagement ::= GAS


////////////////////////
// Solidity grammar for functions and events
////////////////////////
EventAbiDefinition ::= event Identifier IndexedParameterList anonymous?
{
  implements         = "com.github.com.cakevm.intellij_huff_plugin.language.psi.element.HuffCallableElement"
  mixin              = "com.github.com.cakevm.intellij_huff_plugin.language.psi.mixin.HuffEventAbiDefinitionMixin"
  stubClass          = "com.github.com.cakevm.intellij_huff_plugin.language.psi.stub.impl.HuffEventAbiDefinitionStub"
  elementTypeFactory = "com.github.com.cakevm.intellij_huff_plugin.language.psi.stub.impl.FactoryKt.factory"
}

FunctionAbiDefinition ::= function Identifier ParameterList ( FunctionVisibilitySpecifier | StateMutabilitySpecifier )*
                        ( returns ParameterList )?
{
  implements         = "com.github.com.cakevm.intellij_huff_plugin.language.psi.element.HuffCallableElement"
  mixin              = "com.github.com.cakevm.intellij_huff_plugin.language.psi.mixin.HuffFunctionAbiDefinitionMixin"
  stubClass          = "com.github.com.cakevm.intellij_huff_plugin.language.psi.stub.impl.HuffFunctionAbiDefinitionStub"
  elementTypeFactory = "com.github.com.cakevm.intellij_huff_plugin.language.psi.stub.impl.FactoryKt.factory"
}

VirtualSpecifier ::= virtual { pin=1 }
OverrideSpecifier ::= override ( '(' UserDefinedTypeName (',' UserDefinedTypeName)* ')' )? { pin=1 }

UserDefinedTypeName ::= Identifier ( '.' Identifier )*

FunctionVisibilitySpecifier ::= VisibilitySpecifier | VirtualSpecifier | OverrideSpecifier

// According to grammar.txt, it should be only TypeNameList after function, but according to reality ...
FunctionTypeName ::= function ParameterList ( VisibilitySpecifier | StateMutabilitySpecifier )*
                   ( returns ParameterList )?

StorageLocationSpecifier ::= memory | storage | calldata
StateMutabilitySpecifier ::= pure | view | 'payable' | nonpayable
VisibilitySpecifier ::= private | internal | external | public

NumberType ::= intNumType | uIntNumType | byteNumType | bytesNumType | fixedNumType | uFixedNumType
ElementaryTypeName ::= ( address 'payable' ) | payable | address | bool | string | var | NumberType

BytesArrayTypeName ::= bytesNumType StorageLocationSpecifier?
private MappingKey ::= (BytesArrayTypeName | ElementaryTypeName | UserDefinedTypeName ) Identifier?
private MappingValue ::= TypeName Identifier?
MappingTypeName ::= mapping '(' MappingKey '=>' MappingValue ')'

//ArrayTypeName ::= TypeName '[' Expression? ']' StorageLocationSpecifier?
ArrayTypeName ::= TypeName '[]' StorageLocationSpecifier?

TypeName ::= MappingTypeName
        // | UserDefinedLocationTypeName
         | BytesArrayTypeName
         | ArrayTypeName
         | ElementaryTypeName
         | FunctionTypeName

IndexedParameterList ::= '(' (  IndexedParamDef (',' IndexedParamDef )*)? ')'
IndexedParamDef ::= TypeName indexed?  Identifier?
ParameterDef ::= TypeName (constant StorageLocationSpecifier? | StorageLocationSpecifier constant?)? Identifier?
ParameterList ::= '(' ( ParameterDef (',' ParameterDef)* )? ')'
